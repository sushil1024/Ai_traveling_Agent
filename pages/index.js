import Head from 'next/head';
import Image from 'next/image';
import styles from '../styles/Home.module.css';
import { useEffect, useState, CSSProperties } from "react";
import 'bootstrap/dist/css/bootstrap.css';
import usaCitiesData from '../public/usaCitites.json';


import { md, sanitize } from "../helpers/markdown";
import { compiler } from '@/next.config';

import ClipLoader from "react-spinners/ClipLoader";

const GEMINI_API_URL = "https://generativelanguage.googleapis.com/v1/models/gemini-1.5-flash:generateContent";
const API_KEY = process.env.NEXT_PUBLIC_GEMINI_API_KEY;


const override = {
  display: "block", 
  margin: "0 auto",
  borderColor: "red",
};

export default function Home() {
  const [loading, setLoading] = useState(false);
  const [color, setColor] = useState("#ffffff");

  const [formData, setFormData] = useState({
    country: "",
    state: "",
    city: "",
    days: "",
  });

  const [restaurants, setRestaurant] = useState("");
  const [trip, setTrip] = useState("");
  const [countries, setCountries] = useState([]);
  const [states, setStates] = useState([]);
  const [cities, setCities] = useState([]);

  useEffect(() => {
    // Initialize countries dynamically from usaCities.json
    setCountries(Object.keys(usaCitiesData));
  }, []);

  // Handle country change
  const handleCountryChange = (e) => {
    const selectedCountry = e.target.value;
    setFormData({
      ...formData,
      country: selectedCountry,
      state: "",
      city: "",
    });

    if (selectedCountry) {
      setStates(Object.keys(usaCitiesData[selectedCountry])); // Set states based on selected country
      setCities([]); // Reset cities when country changes
    } else {
      setStates([]); // No states if no country selected
      setCities([]);
    }
  };

  // Handle state change
  const handleStateChange = (e) => {
    const selectedState = e.target.value;
    setFormData({
      ...formData,
      state: selectedState,
      city: "",
    });

    if (selectedState) {
      setCities(usaCitiesData[formData.country][selectedState]); // Set cities based on selected state
    } else {
      setCities([]);
    }
  };

  // Handle city change
  const handleCityChange = (e) => {
    setFormData({
      ...formData,
      city: e.target.value,
    });
  };

  // Handle days change
  const handleDaysChange = (e) => {
    setFormData({
      ...formData,
      days: e.target.value,
    });
  };

  const makeMyTrip = async () => {
    setLoading(true); // Show spinner while fetching
  
    try {
      const tripPromise = findEverything("trip");
      const restaurantsPromise = findEverything("restaurants");
  
      await Promise.all([tripPromise, restaurantsPromise]); // Wait for both API calls
    } catch (error) {
      console.error("Error fetching trip details:", error);
    } finally {
      setLoading(false); // Hide spinner after both API calls complete
    }
  };
  

  const findEverything = async (tripDetails) => {
    const contentMap = {
      "trip": "Act as an expert travel agent. I will give you a location and number of days, give me a complete trip for those days in the form of a table.",
      "restaurants": "Act as an expert travel agent. I will give you a state, city, and days. Give me the list of restaurants, bars, and dance clubs that I can visit."
    };
  
    let content = contentMap[tripDetails] || "";
  
    try {
      const response = await fetch(`${GEMINI_API_URL}?key=${API_KEY}`, {
        method: 'POST',
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          contents: [
            { role: "user", parts: [{ text: content }] },
            { role: "user", parts: [{ text: `${formData.state} state, ${formData.city} city for ${formData.days} days` }] }
          ]
        })
      });
  
      const data = await response.json();
  
      if (tripDetails === "trip") {
        setTrip(data.candidates[0]?.content?.parts[0]?.text || "No response received");
      } else {
        setRestaurant(data.candidates[0]?.content?.parts[0]?.text || "No response received");
      }
    } catch (error) {
      console.error(error.message);
    }
  };
  

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <div className={styles.column}>
          {/* Country Dropdown */}
          <h3>Select country</h3>
          <select
            className={styles.input}
            name="country"
            value={formData.country}
            onChange={handleCountryChange}
          >
            <option value="">Select a country</option>
            {countries.map((country) => (
              <option key={country} value={country}>
                {country}
              </option>
            ))}
          </select>

          {/* State Dropdown (Only after selecting country) */}
          <h3>Select state</h3>
          <select
            className={styles.input}
            name="state"
            value={formData.state}
            onChange={handleStateChange}
            disabled={!formData.country}
          >
            <option value="">Select a state</option>
            {states.map((state) => (
              <option key={state} value={state}>
                {state}
              </option>
            ))}
          </select>

          {/* City Dropdown (Only after selecting state) */}
          <h3>Select city</h3>
          <select
            className={styles.input}
            name="city"
            value={formData.city}
            onChange={handleCityChange}
            disabled={!formData.state}
          >
            <option value="">Select a city</option>
            {cities.map((city) => (
              <option key={city} value={city}>
                {city}
              </option>
            ))}
          </select>

          {/* Number of Days Input */}
          <h3>Number of days</h3>
          <input
            className={styles.input}
            type="text"
            value={formData.days}
            onChange={handleDaysChange}
            aria-label="days"
            aria-describedby="basic-addon1"
          />

          {/* Generate Trip Button */}
          <button
            type="button"
            className="btn btn-primary my-3"
            onClick={makeMyTrip}
            disabled={!formData.city || !formData.days} // Disable button until all fields are filled
          >
            Generate my trip
          </button>
        </div>

        {loading &&
          <ClipLoader
            color={color}
            loading={loading}
            cssOverride={override}
            size={150}
            aria-label="Loading Spinner"
            data-testid="loader"
          />
        }

        {!loading &&
          <>
            <div
              className={styles.content}
              dangerouslySetInnerHTML={{
                __html: sanitize(md.render(trip)),
              }}
            >
            </div>


            <div
              className={styles.content}
              dangerouslySetInnerHTML={{
                __html: sanitize(md.render(restaurants)),
              }}
            >
            </div>
          </>
        }

      </main>
    </div >
  )
}


